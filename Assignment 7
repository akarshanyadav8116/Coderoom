#include <iostream>
using namespace std;

int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

//Q1
int main() {
    int n;
    cout << "Enter a positive integer N: ";
    cin >> n;

    int nth_term = fibonacci(n);
    cout << "The " << n << "th term of the Fibonacci series is: " << nth_term << endl;

    return 0;
}

//Q2
#include <iostream>
using namespace std;

void print_fibonacci(int n) {
    int first = 0, second = 1;
    cout << "Fibonacci Series: ";
    for (int i = 1; i <= n; i++) {
        cout << first << " ";
        int next = first + second;
        first = second;
        second = next;
    }
    cout << endl;
}
int main() {
    int n;
    cout << "Enter a positive integer N: ";
    cin >> n;

    print_fibonacci(n);

    return 0;
}
//Q3
#include <iostream>
using namespace std;

bool is_perfect_square(int num) {
    int root = sqrt(num);
    return root * root == num;
}

bool is_fibonacci(int num) {
    return is_perfect_square(5 * num * num + 4) || is_perfect_square(5 * num * num - 4);
}

int main() {
    int number;
    cout << "Enter a positive integer: ";
    cin >> number;

    if (is_fibonacci(number)) {
        cout << number << " is in the Fibonacci series." << endl;
    } else {
        cout << number << " is not in the Fibonacci series." << endl;
    }

    return 0;
}
//Q4
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    while (b) {
        a = a % b;
        swap(a, b);
    }
    return a;
}

int main() {
    int num1, num2;
    cout << "Enter two positive integers: ";
    cin >> num1 >> num2;

    int hcf_result = gcd(num1, num2);
    cout << "The HCF of " << num1 << " and " << num2 << " is: " << hcf_result << endl;

    return 0;
}

//Q5
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    while (b) {
        a = a % b;
        swap(a, b);
    }
    return a;
}

bool are_coprime(int num1, int num2) {
    return gcd(num1, num2) == 1;
}

int main() {
    int num1, num2;
    cout << "Enter two positive integers: ";
    cin >> num1 >> num2;

    if (are_coprime(num1, num2)) {
        cout << num1 << " and " << num2 << " are co-prime numbers." << endl;
    } else {
        cout << num1 << " and " << num2 << " are not co-prime numbers." << endl;
    }

    return 0;
}
//Q6
#include <iostream>
using namespace std;

bool is_prime(int number) {
    if (number <= 1)
        return false;
    for (int i = 2; i * i <= number; i++) {
        if (number % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    cout << "Prime numbers under 100: ";
    for (int i = 2; i < 100; i++) {
        if (is_prime(i)) {
            cout << i << " ";
        }
    }
    cout << endl;
    return 0;
}

//Q7
#include <iostream>
using namespace std;

bool is_prime(int number) {
    if (number <= 1)
        return false;
    for (int i = 2; i * i <= number; i++) {
        if (number % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    int start, end;
    cout << "Enter two positive integers (start and end): ";
    cin >> start >> end;

    cout << "Prime numbers between " << start << " and " << end << ": ";
    for (int i = start; i <= end; i++) {
        if (is_prime(i)) {
            cout << i << " ";
        }
    }
    cout << endl;

    return 0;
}

//Q8
#include <iostream>
using namespace std;

bool is_prime(int number) {
    if (number <= 1)
        return false;
    for (int i = 2; i * i <= number; i++) {
        if (number % i == 0) {
            return false;
        }
    }
    return true;
}

int find_next_prime(int number) {
    int next = number + 1;
    while (!is_prime(next)) {
        next++;
    }
    return next;
}

int main() {
    int number;
    cout << "Enter a positive integer: ";
    cin >> number;

    int next_prime = find_next_prime(number);
    cout << "The next prime number after " << number << " is: " << next_prime << endl;

    return 0;
}
//Q9
#include <iostream>
#include <cmath>
using namespace std;

int count_digits(int number) {
    int count = 0;
    while (number > 0) {
        number /= 10;
        count++;
    }
    return count;
}

bool is_armstrong(int number) {
    int original_number = number;
    int num_digits = count_digits(number);
    int sum = 0;

    while (number > 0) {
        int digit = number % 10;
        sum += pow(digit, num_digits);
        number /= 10;
    }

    return sum == original_number;
}

int main() {
    int number;
    cout << "Enter a positive integer: ";
    cin >> number;

    if (is_armstrong(number)) {
        cout << number << " is an Armstrong number." << endl;
    } else {
        cout << number << " is not an Armstrong number." << endl;
    }

    return 0;
}

//Q10
#include <iostream>
#include <cmath>
using namespace std;

int count_digits(int number) {
    int count = 0;
    while (number > 0) {
        number /= 10;
        count++;
    }
    return count;
}

bool is_armstrong(int number) {
    int original_number = number;
    int num_digits = count_digits(number);
    int sum = 0;

    while (number > 0) {
        int digit = number % 10;
        sum += pow(digit, num_digits);
        number /= 10;
    }

    return sum == original_number;
}

int main() {
    cout << "Armstrong numbers under 1000: ";
    for (int i = 1; i < 1000; i++) {
        if (is_armstrong(i)) {
            cout << i << " ";
        }
    }
    cout << endl;

    return 0;
}






